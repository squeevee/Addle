// THIS HEADER IS AUTOMATICALLY GENERATED AND FOR USE ONLY WITHIN:
//     "(Addle root)/src/common/utilities/config/injector.hpp"
//
// It was generated by:
//     "(Addle root)/etc/tools/genmakeimpl.py"

///@cond FALSE

#pragma once

//     static_assert(
//         std::is_constructible<Impl>::value,
//         "Injector could not find a constructor for Impl."
//     );

    template<class Impl_>
    inline typename std::enable_if<
        std::is_default_constructible<Impl_>::value,
        Impl_*
    >::type make_impl() const
    {
        static_assert(
            !has_init_params<Interface>::value,
            "The interface specifies initialization parameters, but the constructor "
            "does not accept arguments."
        );
        return new Impl_();
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 1,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (1) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 2,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (2) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 3,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (3) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 4,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (4) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 5,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (5) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 6,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (6) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 7,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (7) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 8,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (8) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>(),
            std::declval<Arg<8>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 9,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (9) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this),
            Arg<8>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>(),
            std::declval<Arg<8>>(),
            std::declval<Arg<9>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 10,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (10) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this),
            Arg<8>(*this),
            Arg<9>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>(),
            std::declval<Arg<8>>(),
            std::declval<Arg<9>>(),
            std::declval<Arg<10>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 11,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (11) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this),
            Arg<8>(*this),
            Arg<9>(*this),
            Arg<10>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>(),
            std::declval<Arg<8>>(),
            std::declval<Arg<9>>(),
            std::declval<Arg<10>>(),
            std::declval<Arg<11>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 12,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (12) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this),
            Arg<8>(*this),
            Arg<9>(*this),
            Arg<10>(*this),
            Arg<11>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>(),
            std::declval<Arg<8>>(),
            std::declval<Arg<9>>(),
            std::declval<Arg<10>>(),
            std::declval<Arg<11>>(),
            std::declval<Arg<12>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 13,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (13) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this),
            Arg<8>(*this),
            Arg<9>(*this),
            Arg<10>(*this),
            Arg<11>(*this),
            Arg<12>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>(),
            std::declval<Arg<8>>(),
            std::declval<Arg<9>>(),
            std::declval<Arg<10>>(),
            std::declval<Arg<11>>(),
            std::declval<Arg<12>>(),
            std::declval<Arg<13>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 14,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (14) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this),
            Arg<8>(*this),
            Arg<9>(*this),
            Arg<10>(*this),
            Arg<11>(*this),
            Arg<12>(*this),
            Arg<13>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>(),
            std::declval<Arg<8>>(),
            std::declval<Arg<9>>(),
            std::declval<Arg<10>>(),
            std::declval<Arg<11>>(),
            std::declval<Arg<12>>(),
            std::declval<Arg<13>>(),
            std::declval<Arg<14>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 15,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (15) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this),
            Arg<8>(*this),
            Arg<9>(*this),
            Arg<10>(*this),
            Arg<11>(*this),
            Arg<12>(*this),
            Arg<13>(*this),
            Arg<14>(*this)
        );
    }
    
    template<class Impl_>
    inline decltype(
        Impl_(
            std::declval<Arg<0>>(),
            std::declval<Arg<1>>(),
            std::declval<Arg<2>>(),
            std::declval<Arg<3>>(),
            std::declval<Arg<4>>(),
            std::declval<Arg<5>>(),
            std::declval<Arg<6>>(),
            std::declval<Arg<7>>(),
            std::declval<Arg<8>>(),
            std::declval<Arg<9>>(),
            std::declval<Arg<10>>(),
            std::declval<Arg<11>>(),
            std::declval<Arg<12>>(),
            std::declval<Arg<13>>(),
            std::declval<Arg<14>>(),
            std::declval<Arg<15>>()
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= 16,
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (16) argument(s)."
        );
        return new Impl_(
            Arg<0>(*this),
            Arg<1>(*this),
            Arg<2>(*this),
            Arg<3>(*this),
            Arg<4>(*this),
            Arg<5>(*this),
            Arg<6>(*this),
            Arg<7>(*this),
            Arg<8>(*this),
            Arg<9>(*this),
            Arg<10>(*this),
            Arg<11>(*this),
            Arg<12>(*this),
            Arg<13>(*this),
            Arg<14>(*this),
            Arg<15>(*this)
        );
    }
    
/*
    template<class Impl_>
    using _detect_make_impl_t = decltype(Injector::template make_impl<Impl_>);
    
    static_assert(
        boost::is_detected<_detect_make_impl_t, Impl>::value,
        "Injector could not find a supported constructor. Note that private "
        "constructors, copy construtors, move constructors, and constructors "
        "taking more than 16 argument(s) are not supported."
    );*/

///@endcond
