// THIS HEADER IS AUTOMATICALLY GENERATED AND FOR USE ONLY WITHIN:
//     "(Addle root)/src/common/utilities/config/injector.hpp"
//
// It was generated by:
//     "(Addle root)/etc/tools/genmakeimpl.py"

#pragma once

///@cond FALSE

    static_assert(
        std::is_constructible<Impl>::value,
        "Injector could not find a constructor for Impl."
    );

    template<class Impl_>
    inline typename std::enable_if<
        std::is_default_constructible<Impl_>::value,
        Impl_*
    >::type make_impl() const
    {
        static_assert(
            !has_init_params<Interface>::value,
            "The interface specifies initialization parameters, but the "
            "constructor does not accept any arguments."
        );
        return new Impl_();
    }
    
% for i in range(0, arg_count):
    template<class Impl_>
    inline decltype(
        Impl_(
    % for j in range(0, i + 1):
            std::declval<Arg<${j}>>()${ ',' if i != j else ''}
    % endfor
        ),
        (Impl_*)(NULL)
    ) make_impl() const
    {
        static_assert(
            _required_arg_count<Interface>::value <= ${i + 1},
            "The interface specifies initialization parameters, but the "
            "constructor accepts too few (${i + 1}) argument(s)."
        );
        return new Impl_(
    % for j in range(0, i + 1):
            Arg<${j}>(*this)${ ',' if i != j else ''}
    % endfor
        );
    }
    
% endfor

    template<class Impl_>
    using _detect_make_impl_t = decltype(make_impl<Impl_>());
    
    static_assert(
        boost::is_detected<_detect_make_impl_t, Impl>::value,
        "Injector could not find a supported constructor. Note that private "
        "constructors, copy construtors, move constructors, and constructors "
        "taking more than ${arg_count} argument(s) are not supported."
    );

///@endcond
